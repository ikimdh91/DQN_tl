# -*- coding: utf-8 -*-
"""3DQN_PER.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yUX6XIvivqP-a1IMLfNHdIq1RifEO5Jz
"""

import torch
import numpy as np
from torch import nn
from torch import optim
import torch.nn.functional as F

# namedtuple 생성
from collections import namedtuple

Transition = namedtuple(
    'Transition', ('state', 'action', 'next_state', 'reward'))

# 상수 정의
ENV = 'CartPole-v0'  # 태스크 이름
GAMMA = 0.99  # 시간할인율
MAX_STEPS = 200  # 1에피소드 당 최대 단계 수
NUM_EPISODES = 500  # 최대 에피소드 수

# transition을 저장하기 위한 메모리 클래스


class ReplayMemory:

    def __init__(self, CAPACITY):
        self.capacity = CAPACITY  # 메모리의 최대 저장 건수
        self.memory = []  # 실제 transition을 저장할 변수
        self.index = 0  # 저장 위치를 가리킬 인덱스 변수

    def push(self, state, action, state_next, reward):
        '''transition = (state, action, state_next, reward)을 메모리에 저장'''

        if len(self.memory) < self.capacity:
            self.memory.append(None)  # 메모리가 가득차지 않은 경우

        # Transition이라는 namedtuple을 사용하여 키-값 쌍의 형태로 값을 저장
        self.memory[self.index] = Transition(state, action, state_next, reward)

        self.index = (self.index + 1) % self.capacity  # 다음 저장할 위치를 한 자리 뒤로 수정

    def sample(self, batch_size):
        '''batch_size 갯수 만큼 무작위로 저장된 transition을 추출'''
        return random.sample(self.memory, batch_size)

    def __len__(self):
        '''len 함수로 현재 저장된 transition 갯수를 반환'''
        return len(self.memory)

# TD오차를 저장할 메모리 클래스

TD_ERROR_EPSILON = 0.0001  # 오차에 더해줄 바이어스


class TDerrorMemory:

    def __init__(self, CAPACITY):
        self.capacity = CAPACITY  # 메모리의 최대 저장 건수
        self.memory = []  # 실제 TD오차를 저장할 변수
        self.index = 0  # 저장 위치를 가리킬 인덱스 변수

    def push(self, td_error):
        '''TD 오차를 메모리에 저장'''

        if len(self.memory) < self.capacity:
            self.memory.append(None)  # 메모리가 가득차지 않은 경우

        self.memory[self.index] = td_error
        self.index = (self.index + 1) % self.capacity  # 다음 저장할 위치를 한 자리 뒤로 수정

    def __len__(self):
        '''len 함수로 현재 저장된 갯수를 반환'''
        return len(self.memory)

    def get_prioritized_indexes(self, batch_size):
        '''TD 오차에 따른 확률로 인덱스를 추출'''

        # TD 오차의 합을 계산
        sum_absolute_td_error = np.sum(np.absolute(self.memory))
        sum_absolute_td_error += TD_ERROR_EPSILON * len(self.memory)  # 충분히 작은 값을 더해줌

        # batch_size 개만큼 난수를 생성하고 오름차순으로 정렬
        rand_list = np.random.uniform(0, sum_absolute_td_error, batch_size)
        rand_list = np.sort(rand_list)

        # 위에서 만든 난수로 인덱스를 결정
        indexes = []
        idx = 0
        tmp_sum_absolute_td_error = 0
        for rand_num in rand_list:
            while tmp_sum_absolute_td_error < rand_num:
                tmp_sum_absolute_td_error += (
                    abs(self.memory[idx]) + TD_ERROR_EPSILON)
                idx += 1

            # TD_ERROR_EPSILON을 더한 영향으로 인덱스가 실제 갯수를 초과했을 경우를 위한 보정
            if idx >= len(self.memory):
                idx = len(self.memory) - 1
            indexes.append(idx)

        return indexes

    def update_td_error(self, updated_td_errors):
        '''TD 오차를 업데이트'''
        self.memory = updated_td_errors

# 딥러닝 신경망 구성
# 신경망 설정(Chainer 스타일)
import torch.nn as nn
import torch.nn.functional as F


class Net(nn.Module):

    def __init__(self, n_in, n_mid, n_out):
        super(Net, self).__init__()
        self.fc1 = nn.Linear(n_in, n_mid)
        self.fc2 = nn.Linear(n_mid, n_mid)
        self.fc3 = nn.Linear(n_mid, n_out)

    def forward(self, x):
        h1 = F.relu(self.fc1(x))
        h2 = F.relu(self.fc2(h1))
        output = self.fc3(h2)
        return output

# 에이전트의 두뇌 역할을 하는 클래스, DDQN을 실제 수행한다 

import random
import torch
from torch import nn
from torch import optim
import torch.nn.functional as F

BATCH_SIZE = 32
CAPACITY = 10000


class Brain:
    def __init__(self, num_states, num_actions):
        self.num_actions = num_actions  # CartPoleの行動（右に左に押す）の2を取得

        # transition을 기억하기 위한 메모리 객체 생성
        self.memory = ReplayMemory(CAPACITY)

        # 신경망 구성
        n_in, n_mid, n_out = num_states, 32, num_actions
        self.main_q_network = Net(n_in, n_mid, n_out)  # Net 클래스를 사용
        self.target_q_network = Net(n_in, n_mid, n_out)  # Net 클래스를 사용
        print(self.main_q_network)  # 신경망의 구조를 출력

        # 최적화 기법 선택
        self.optimizer = optim.Adam(
            self.main_q_network.parameters(), lr=0.0001)

        # TD 오차를 기억하기 위한 메모리 객체 생성
        self.td_error_memory = TDerrorMemory(CAPACITY)

    def replay(self, episode):
        '''Experience Replayでネットワークの結合パラメータを学習'''

        # 1. 저장된 transition의 수를 확인
        if len(self.memory) < BATCH_SIZE:
            return

        # 2. 미니배치 생성
        self.batch, self.state_batch, self.action_batch, self.reward_batch, self.non_final_next_states = self.make_minibatch(
            episode)

        # 3. 정답신호로 사용할 Q(s_t, a_t)를 계산
        self.expected_state_action_values = self.get_expected_state_action_values()

        # 4. 결합 가중치 수정
        self.update_main_q_network()

    def decide_action(self, state, episode):
        '''현재 상태로부터 행동을 결정함'''
        # ε-greedy 알고리즘에서 서서히 최적행동의 비중을 늘린다
        epsilon = 0.5 * (1 / (episode + 1))

        if epsilon <= np.random.uniform(0, 1):
            self.main_q_network.eval()  # 신경망을 추론 모드로 전환
            with torch.no_grad():
                action = self.main_q_network(state).max(1)[1].view(1, 1)
            # 신경망 출력의 최댓값에 대한 인덱스 = max(1)[1]
            # .view(1,1)은 [torch.LongTensor of size 1] 을 size 1*1로 변환하는 역할을 한다

        else:
            # 행동을 무작위로 반환(0 혹은 1)
            action = torch.LongTensor(
                [[random.randrange(self.num_actions)]])  # 행동을 무작위로 반환(0 혹은 1)
            # action은 [torch.LongTensor of size 1*1] 형태가 된다

        return action

    def make_minibatch(self, episode):
        '''2. ミニバッチの作成'''

        # 2.1 메모리 객체에서 미니배치를 추출
        if episode < 30:
            transitions = self.memory.sample(BATCH_SIZE)
        else:
            # TD 오차를 이용해 미니배치를 추출하도록 수정
            indexes = self.td_error_memory.get_prioritized_indexes(BATCH_SIZE)
            transitions = [self.memory.memory[n] for n in indexes]

        # 2.2 각 변수를 미니배치에 맞는 형태로 변형
        # transitions는 각 단계 별로 (state, action, state_next, reward) 형태로 BATCH_SIZE 갯수만큼 저장됨
        # 다시 말해, (state, action, state_next, reward) * BATCH_SIZE 형태가 된다
        # 이것을 미니배치로 만들기 위해
        # (state*BATCH_SIZE, action*BATCH_SIZE, state_next*BATCH_SIZE, reward*BATCH_SIZE) 형태로 변환한다
        batch = Transition(*zip(*transitions))

        # 2.3 각 변수의 요소를 미니배치에 맞게 변형하고, 신경망으로 다룰 수 있도록 Variable로 만든다
        # state를 예로 들면, [torch.FloatTensor of size 1*4] 형태의 요소가 BATCH_SIZE 갯수만큼 있는 형태이다
        # 이를 torch.FloatTensor of size BATCH_SIZE*4 형태로 변형한다
        # 상태, 행동, 보상, non_final 상태로 된 미니배치를 나타내는 Variable을 생성
        # cat은 Concatenates(연접)을 의미한다
        state_batch = torch.cat(batch.state)
        action_batch = torch.cat(batch.action)
        reward_batch = torch.cat(batch.reward)
        non_final_next_states = torch.cat([s for s in batch.next_state
                                           if s is not None])

        return batch, state_batch, action_batch, reward_batch, non_final_next_states

    def get_expected_state_action_values(self):
        '''정답신호로 사용할 Q(s_t, a_t)를 계산'''

        # 3.1 신경망을 추론 모드로 전환
        self.main_q_network.eval()
        self.target_q_network.eval()

        # 3.2 신경망으로 Q(s_t, a_t)를 계산
        # self.model(state_batch)은 왼쪽, 오른쪽에 대한 Q값을 출력하며
        # [torch.FloatTensor of size BATCH_SIZEx2] 형태이다
        # 여기서부터는 실행한 행동 a_t에 대한 Q값을 계산하므로 action_batch에서 취한 행동 a_t가 
        # 왼쪽이냐 오른쪽이냐에 대한 인덱스를 구하고, 이에 대한 Q값을 gather 메서드로 모아온다
        self.state_action_values = self.main_q_network(
            self.state_batch).gather(1, self.action_batch)

        # 3.3 max{Q(s_t+1, a)}값을 계산한다 이때 다음 상태가 존재하는지에 주의해야 한다

        # cartpole이 done 상태가 아니고, next_state가 존재하는지 확인하는 인덱스 마스크를 만듬
        non_final_mask = torch.ByteTensor(tuple(map(lambda s: s is not None,
                                                    self.batch.next_state)))
        # 먼저 전체를 0으로 초기화
        next_state_values = torch.zeros(BATCH_SIZE)
        a_m = torch.zeros(BATCH_SIZE).type(torch.LongTensor)

        # 다음 상태에서 Q값이 최대가 되는 행동 a_m을 Main Q-Network로 계산
        # 마지막에 붙은 [1]로 행동에 해당하는 인덱스를 구함
        a_m[non_final_mask] = self.main_q_network(
            self.non_final_next_states).detach().max(1)[1]

        # 다음 상태가 있는 것만을 걸러내고, size 32를 32*1로 변환
        a_m_non_final_next_states = a_m[non_final_mask].view(-1, 1)

        # 다음 상태가 있는 인덱스에 대해 행동 a_m의 Q값을 target Q-Network로 계산
        # detach() 메서드로 값을 꺼내옴
        # squeeze() 메서드로 size[minibatch*1]을 [minibatch]로 변환
        next_state_values[non_final_mask] = self.target_q_network(
            self.non_final_next_states).gather(1, a_m_non_final_next_states).detach().squeeze()

        # 3.4 정답신호로 사용할 Q(s_t, a_t)값을 Q러닝 식으로 계산한다
        expected_state_action_values = self.reward_batch + GAMMA * next_state_values

        return expected_state_action_values

    def update_main_q_network(self):
        '''4. 결합 가중치 수정'''

        # 4.1 신경망을 학습 모드로 전환
        self.main_q_network.train()

        # 4.2 손실함수를 계산 (smooth_l1_loss는 Huber 함수)
        # expected_state_action_values은
        # size가 [minibatch]이므로 unsqueeze하여 [minibatch*1]로 만든다
        loss = F.smooth_l1_loss(self.state_action_values,
                                self.expected_state_action_values.unsqueeze(1))

        # 4.3 결합 가중치를 수정한다
        self.optimizer.zero_grad()  # 경사를 초기화
        loss.backward()  # 역전파 계산
        self.optimizer.step()  # 결합 가중치 수정

    def update_target_q_network(self):  # DDQN에서 추가됨
        '''Target Q-Network을 Main Q-Network와 맞춤'''
        self.target_q_network.load_state_dict(self.main_q_network.state_dict())

    def update_td_error_memory(self):  # PrioritizedExperienceReplay에서 추가됨
        '''TD 오차 메모리에 저장된 TD 오차를 업데이트'''

        # 신경망을 추론 모드로 전환
        self.main_q_network.eval()
        self.target_q_network.eval()

        # 전체 transition으로 미니배치를 생성
        transitions = self.memory.memory
        batch = Transition(*zip(*transitions))

        state_batch = torch.cat(batch.state)
        action_batch = torch.cat(batch.action)
        reward_batch = torch.cat(batch.reward)
        non_final_next_states = torch.cat([s for s in batch.next_state
                                           if s is not None])

        # 신경망의 출력 Q(s_t, a_t)를 계산
        state_action_values = self.main_q_network(
            state_batch).gather(1, action_batch)

        # cartpole이 done 상태가 아니고, next_state가 존재하는지 확인하는 인덱스 마스크를 만듬
        non_final_mask = torch.ByteTensor(
            tuple(map(lambda s: s is not None, batch.next_state)))

        # 먼저 전체를 0으로 초기화, 크기는 기억한 transition 갯수만큼
        next_state_values = torch.zeros(len(self.memory))
        a_m = torch.zeros(len(self.memory)).type(torch.LongTensor)

        # 다음 상태에서 Q값이 최대가 되는 행동 a_m을 Main Q-Network로 계산
        # 마지막에 붙은 [1]로 행동에 해당하는 인덱스를 구함
        a_m[non_final_mask] = self.main_q_network(
            non_final_next_states).detach().max(1)[1]

        # 다음 상태가 있는 것만을 걸러내고, size 32를 32*1로 변환
        a_m_non_final_next_states = a_m[non_final_mask].view(-1, 1)

        # 다음 상태가 있는 인덱스에 대해 행동 a_m의 Q값을 target Q-Network로 계산
        # detach() 메서드로 값을 꺼내옴
        # squeeze() 메서드로 size[minibatch*1]을 [minibatch]로 변환
        next_state_values[non_final_mask] = self.target_q_network(
            non_final_next_states).gather(1, a_m_non_final_next_states).detach().squeeze()

        # TD 오차를 계산
        td_errors = (reward_batch + GAMMA * next_state_values) - \
            state_action_values.squeeze()
        # state_action_values는 size[minibatch*1]이므로 squeeze() 메서드로 size[minibatch]로 변환

        # TD 오차 메모리를 업데이트. Tensor를 detach() 메서드로 꺼내와서 NumPy 변수로 변환하고 다시 파이썬 리스트로 변환
        self.td_error_memory.memory = td_errors.detach().numpy().tolist()

class Agent:
    def __init__(self, num_states, num_actions):
        '''태스크의 상태 및 행동의 가짓수를 설정'''
        self.brain = Brain(num_states, num_actions)  # 에이전트의 행동을 결정할 두뇌 역할 객체를 생성
    def get_state(self, ):
        count = 0
        avg_veh_num = 0.94

        with open('output/test-1-node-PeriodicOutput.csv') as csvfile:
            reader = csv.DictReader(csvfile)
            for row in reader:
                count += 1
                avg_veh_num += float(row['avgvehnum'])

        avg_veh_num = avg_veh_num / count

        return avg_veh_num


    def update_q_function(self, episode):
        '''Q함수를 수정'''
        self.brain.replay(episode)

    def get_action(self, state, episode):
        '''행동을 결정'''
        action = self.brain.decide_action(state, episode)
        return action
    
    # 선택된 행동 기반 신호체계 수정 : 신호체계(tss.xml)에서 Duration 값 증가 또는 감소하도록 수정.
    def action_policy(self, action, epoch):
        #print("ACTION POLICY")

        # 첫 Epoch 에는 초기 신호체계 파일을 읽고 다음 Epoch 때부터는 이전 신호체계 파일을 읽음.
        if epoch == 1:
            previous_tll_file = 'data/test-1-node/tss.xml'
        else:
            previous_tll_file = 'tlls/tll_epoch-' + str(epoch - 1) + '.xml'
        tree = parse(previous_tll_file)
        root = tree.getroot()

        # 선택된 행동 기반 신호체계 수정 : [0]:duration 증가 / [1]: duration 감소
        if action == 0:
            for i in range(5, 10):
                root[0][i][0].set("duration", str(int(root[0][i][0].get("duration")) + 1))
        else:
            for i in range(5, 10):
                if int(root[0][i][0].get("duration")) - 20 > 0:
                    root[0][i][0].set("duration", str(int(root[0][i][0].get("duration")) - 1))

        # 수정된 신호체계 파일 저장.
        output_tll_file = 'tlls/tll_epoch-' + str(epoch) + '.xml'
        tree.write(output_tll_file)
    
    # SALT 시뮬레이터 실행 : 현재 [상태, 행동] 기반 다음 상태 및 보상 추출
    def run_salt(self, state, action, epoch):

        reward = 0

        # SALT 시뮬레이터 설정 파일 경로.
        config_file = 'data/test-1-node/scenario.json'

        # SALT 시뮬레이터 설정 파일 수정 : 매번 Epoch 마다 이전 신호체계 파일을 읽도록 설정 파일을 수정.
        with open(config_file) as r:
            data = json.load(r)
            if epoch != 1:
                data["input"]["trafficLightSystem"] = '../../tlls/tll_epoch-' + str(epoch - 1) + '.xml'
            else:
                data["input"]["trafficLightSystem"] = 'tss.xml'
            print('\n\n\nDATA --------------------------------------------------------------------------------------\n',
                  data["input"]["trafficLightSystem"])

        with open(config_file, 'w') as w:
            json.dump(data, w, ensure_ascii=False)

        # SALT 시뮬레이터 실행
        call(['./saltalone', config_file])

        # 다음 상태 추출
        next_state = round(agent.get_state(), 2)

        # 현재 상태와 다음 상태를 비교하여 보상 값 설정
        if state < next_state:
            reward = -1
        else:
            reward = 1

        return next_state, reward
        
        return next_state, reward
        
    def memorize(self, state, action, state_next, reward):
        '''memory 객체에 state, action, state_next, reward 내용을 저장'''
        self.brain.memory.push(state, action, state_next, reward)

    def update_target_q_function(self):
        '''Target Q-Network을 Main Q-Network와 맞춤'''
        self.brain.update_target_q_network()
        
    def memorize_td_error(self, td_error):  # PrioritizedExperienceReplay에서 추가
        '''TD 오차 메모리에 TD 오차를 저장'''
        self.brain.td_error_memory.push(td_error)
        
    def update_td_error_memory(self):  # PrioritizedExperienceReplay에서 추가
        '''TD 오차 메모리의 TD 오차를 업데이트'''
        self.brain.update_td_error_memory()

class Environment:
    def __init__(self):
        #self.env = gym.make(ENV)  # 태스크를 설정
        num_states = 1  # 태스크의 상태 변수 수(4)를 받아옴
        num_actions = 2  # 태스크의 행동 가짓수(2)를 받아옴
        # 에이전트 역할을 할 객체를 생성
        self.agent = Agent(num_states, num_actions)

    def run(self):
        
        for episode in range(2):
            # 현재 상태(교통량) 추출 : SALT 시뮬레이터의 초기 값 (output/test-1-node-PeriodicOutput.csv)
            state = round(self.agent.get_state(), 2)  # 관측을 변환없이 그대로 상태 s로 사용
            #print("STATE 1 =  ",state)
            state = np.reshape(state,1)
            #print("STATE 2 =  ",state)
            state = torch.from_numpy(state).type(torch.FloatTensor)  # NumPy 변수를 파이토치 텐서로 변환
            #print("STATE 3 =  ",state)
            state = torch.unsqueeze(state, 0)  # size 4를 size 1*4로 변환
            #print("STATE 4 =  ",state)

            print("CURRENT STATE = ", state)

            # 현재 상태 기반 행동 선택 : 0 또는 1
            action = self.agent.get_action(state, episode)
            print("ACTION = ", action)
            
            # 선택된 행동 기반 신호 체계 수정 : [0]:Duration+1 / [1]:Duration-1
            #agent.action_policy(action, epoch)

            # 새로운 상태 및 행동 기반 다음 상태 및 보상 추출 : SALT 시뮬레이터 실행
            #next_state, reward = agent.run_salt(state, action, epoch)
            #state_next, reward = self.agent.run_salt()
            reward = torch.FloatTensor([1.0])
            #print("NEXT STATE = ", state_next, "    REWARD = ",reward)
            
         
            # 관측 결과를 업데이트
            state_next = round(self.agent.get_state(), 2)  # 관측을 변환없이 그대로 상태 s로 사용
            #print("STATE 1 =  ",state)
            state_next = np.reshape(state_next,1)
            #print("STATE 2 =  ",state)
            state_next = torch.from_numpy(state_next).type(torch.FloatTensor)  # NumPy 변수를 파이토치 텐서로 변환
            #print("STATE 3 =  ",state)
            state_next = torch.unsqueeze(state_next, 0)  # size 4를 size 1*4로 변환
            
            reward = torch.FloatTensor([1.0])
            print("NEXT STATE = ", state_next, "    REWARD = ",reward)
            
            
            
            # 메모리에 경험을 저장
            self.agent.memorize(state, action, state_next, reward)

            # TD 오차 메모리에 TD 오차를 저장
            self.agent.memorize_td_error(0)  # 여기서는 정확한 값 대신 0을 저장함

            # PrioritizedExperienceReplay로 Q함수를 수정
            self.agent.update_q_function(episode)
            
            # 관측 결과를 업데이트
            state = state_next
            
            if reward == 1 :
                # TD 오차 메모리의 TD 오차를 업데이트
                self.agent.update_td_error_memory()

                # DDQN으로 추가된 부분 2에피소드마다 한번씩 Target Q-Network을 Main Q-Network와 맞춰줌
                if(episode % 2 == 0):
                    self.agent.update_target_q_function()
                break

cartpole_env = Environment()
cartpole_env.run()

